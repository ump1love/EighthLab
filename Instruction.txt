Завдання 1. Розробіть консольний додаток, в якому клас ConfigurationManager використовує Singleton патерн. 
Цей клас повинен зберігати конфігураційні налаштування (наприклад, різні параметри середовища: режими логування, налаштування підключення до бази даних тощо) і бути доступним у різних частинах програми. 
Реалізуйте можливість зміни та збереження конфігураційних налаштувань через консольний інтерфейс, демонструючи, що всі зміни відображаються у єдиному екземплярі ConfigurationManager.

Завдання 2. Створіть додаток для візуалізації даних, де GraphFactory використовує Factory Method для створення різних типів графіків (наприклад, лінійний графік, стовпчиковий графік, кругова діаграма). 
Кожен тип графіка є похідним від спільного інтерфейсу або абстрактного класу з методом Draw(). Користувач через консоль вводить тип графіка та дані для візуалізації, а програма використовує відповідну фабрику для створення та візуалізації графіка.

Завдання 3. Реалізуйте додаток, що симулює створення різних типів технологічних продуктів (наприклад, смартфонів, ноутбуків, планшетів). 
Використовуйте Abstract Factory для визначення фабрик, що створюють різні компоненти (екрани, процесори, камери). 
Користувач через консоль вибирає тип продукту для створення, а програма використовує відповідну фабрику для збірки кінцевого продукту з різних компонентів.

Завдання 4. Розробіть систему для імпорту та експорту даних між різними форматами (наприклад, CSV, XML, JSON). 
Використовуйте Prototype для створення шаблонів даних. Потім реалізуйте Adapter для забезпечення сумісності між різними форматами файлів. 
Користувач через консоль вибирає формат вихідних та цільових даних, а система використовує відповідний адаптер для перетворення даних із одного формату в інший.